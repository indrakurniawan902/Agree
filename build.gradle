// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '8.0.0' apply false
    id 'com.android.library' version '8.0.0' apply false
    id 'org.jetbrains.kotlin.android' version libs.versions.kotlin.version apply false
    id 'com.android.dynamic-feature' version '8.0.0' apply false
    id 'androidx.navigation.safeargs.kotlin' version '2.5.1' apply false
    id "com.google.gms.google-services" version "4.3.13" apply false
    id "com.google.firebase.crashlytics" version "2.9.1" apply false
    id "com.google.devtools.ksp" version "1.7.21-1.0.8" apply true
    id "com.google.firebase.appdistribution" version "4.0.0" apply false
}


ext {
    navigation = '2.4.2'
    appVersion= "1.8.10"
    appVersionCode= 7
    kotlin_version = "1.6.1"
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        allWarningsAsErrors = it.hasProperty("warningsAsErrors") ? it.warningsAsErrors : false
        freeCompilerArgs += listOf(
                "-progressive",
                "-Xnew-inference",
                "-Xextended-compiler-checks",
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xopt-in=kotlin.Experimental"
        )
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task copyGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}

task deleteGitHook(type: Delete) {
    def existingGitHook = file("$projectDir/.git/hooks/pre-commit")
    if (existingGitHook.exists()) {
        delete existingGitHook
    }
}

task installGitHook {
    def existingGitHook = file("$projectDir/.git/hooks/pre-commit")
    def newGitHook = file("$projectDir/pre-commit")

    if (existingGitHook.exists()) {

        def existingFileStream = new FileInputStream(existingGitHook)
        def newFileStream = new FileInputStream(newGitHook)

        def existingGitHookString = new String(
                new byte[existingFileStream.available()],
                0,
                existingFileStream.read(new byte[existingFileStream.available()]),
                "UTF-8"
        )
        def newGitHookString = new String(
                new byte[newFileStream.available()],
                0,
                newFileStream.read(new byte[newFileStream.available()]),
                "UTF-8"
        )

        if (existingGitHook <=> newGitHook) {
            if (existingGitHookString == newGitHookString) {
                println("GitHook is Up To Date, Skiping")
            } else {
                println("GitHook is Outdated, Updating GitHook")
                dependsOn deleteGitHook
                dependsOn copyGitHook
                tasks.findByName("copyGitHook").mustRunAfter('deleteGitHook')
            }
        } else {
            println("GitHook is Outdated, Updating GitHook")
            dependsOn deleteGitHook
            dependsOn copyGitHook
            tasks.findByName("copyGitHook").mustRunAfter('deleteGitHook')
        }
    } else {
        println("GitHook Not Found, Instaling GitHook")
        dependsOn copyGitHook
    }
    doLast {
        println("Success Installing GitHook")
    }
}

//task installGitHook(type: Exec) {
//    commandLine 'sh','script.sh'
//}

tasks.getByPath(':base:preBuild').dependsOn installGitHook